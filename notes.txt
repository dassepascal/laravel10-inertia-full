https://www.youtube.com/watch?v=_oa-VWqCuOQ&list=PLeeuvNW2FHVjrsrvuVZwyqNIyDvYNn33E&index=2

composer require laravel/jetstream
Factory:

 php artisan make:factory CourseFactory --model=Course

<template>
  <app-layout>
  <template #header>
   liste des formations
  </template>
  <h1>coucou coucou</h1>
  </app-layout>
</template>

<script >
import AppLayout from '@/Layouts/AppLayout.vue'
export default {
components: { AppLayout },
props:
  ['courses'],

},

mounted(){
    console.log(this.courses)
},
}
</script>


<template>
  <app-layout>
  <template #header>
   liste des formations
  </template>
  <h1>coucou coucou</h1>
  </app-layout>
</template>

<script >
import AppLayout from '@/Layouts/AppLayout.vue'
export default {
components: { AppLayout },
data(){
  return {
    courseList:this.courses
  }
},
props:
  ['courses'],

mounted(){
    console.log(this.courseList)
},
}
</script>


creation de la table
php artisan make:migration create_completions_table
Relation many to many

function watched
 //test status avec axios

Participants: on veut juste regader 1 seul
dans CourseController
 public function index()
    {
        $courses = Course::with('user')
        ->select('courses.*',DB::raw)
        ->withCount('episodes')->get();
        //dd($courses);
        return Inertia::render('Courses/Index', [
            'courses' => $courses
        ]);
    }


create progressBar

ensuite dans vue : import ProgressBar from './ProgressBar'

components : ProgressBar

dans template : <progress-bar></progress-bar>

qu'est ce que je veux faire ?
quand je clic sur progressButton ma progressbar change
nombre episodes de la formation + episodes vue par le user

recherche dans le controller dans la methode show
'course' : les episodes
'watched' : episode vue par user

dans Show.vue:
<progress-bar : watched-episodes = "watched" />

on recupere ces informations dans ProgressBar : Props:['watchedEpisodes', 'episodes']

utilisation des methodes computed
pourquoi? cela rafraichi automatiquement la page

   return Math.ceil(filteredEp.length / this.episodes.length * 100);

eventBus

dans app.js
window.eventBus = new Vue();

je vais pouvoir emettre un evenement et l'ecouter
ProgressButton

on veut mettre à jour watchedEpisodes

installation de Vue3-eventBus


affichage flash
doc inertia
share data
class HandleInertiaRequests extends Middleware
{
    public function share(Request $request)
    {
        return array_merge(parent::share($request), [
            'flash' => [
                'message' => fn () => $request->session()->get('message')
            ],
        ]);
    }
}

creation episodes

remove
corbeil lien : https://emojipedia.org/fr/corbeille-%C3%A0-papiers/


Model courses
pb assignement de masse
protected $fillable = ['title','description']
cette formation appartien a l'utilisateur connecte on est oblige de remplir un champ user_id, on ne le recupere pas depuis le request


edit
pb affichage des messages errors

resoud pb edit formations

bouton edit permet au user d'editer leurs formations utilisation de "polities"
php artisan make:policy CoursePolicy

il faut l'indiquer dans le Providers/AuthServiceProvider.php

class AuthServiceProvider extends ServiceProvider
{
    /**
     * The model to policy mappings for the application.
     *
     * @var array<class-string, class-string>
     */
    protected $policies = [

         'App\Models\Course' => 'App\Policies\CoursePolicy',
    ];
}


etape b
dans CoursePolicy
 public function update(User $user, Course $course)
    {
        return $user->id === $course->user_id;
    }

    dans CourseController
    la methode update
      $this->authorize('update', $course);

empecher l'update suer lapage edition


gestion de l'affichage
affiner la vue  contourne le can de Blade

Dans AuthServiceProvider

 public function boot(): void
    {
        $this->registerPolicies();

        Gate::define('update-course', function ($course) {
            return $course->user_id === auth()->user()->id;
        });
    }

    dans Course.php

     protected $appends = ['update'];

   public function getUpdateAttribute()
    {
        //
        return $this->user_id === auth()->id();
    }

    avec ce code si tu es l'editeur du vois le button edit sinon pas de button


Affichage de la duree de la video de youtube

https://console.cloud.google.com/apis/dashboard?pli=1&project=world-bucket-list-342715


url api : https://www.googleapis.com/youtube/v3/videos?key=AIzaSyDzA_w7U_77ZBny9ZwrkCFrivhA3ePEz8c&id=j-_WrFxbpnQ&t=6s&part=contentDetails

dans
CourseController
methode index
dd($response->json());

array:4 [▼ // app\Http\Controllers\CourseController.php:25
  "kind" => "youtube#videoListResponse"
  "etag" => "ePh7pJ6UWl0SnsvHfk3MbXrAxqc"
  "items" => array:1 [▼
    0 => array:4 [▼
      "kind" => "youtube#video"
      "etag" => "91ZFBH7_RC3ukoE-g-ytNhdkhwM"
      "id" => "j-_WrFxbpnQ"
      "contentDetails" => array:7 [▼
        "duration" => "PT16M44S"
        "dimension" => "2d"
        "definition" => "hd"
        "caption" => "true"
        "licensedContent" => true
        "contentRating" => []
        "projection" => "rectangular"
      ]
    ]
  ]
  "pageInfo" => array:2 [▶]
]

modifier la table episode
php artisan make:migration add_duration_to_episodes_table --table=episodes

Episode.php
mettre 'duration'
   protected $fillable = ['title', 'description', 'video_url', 'course_id','duration'];

creation d'un dossier Youtube dans app

chemin pour recupere la duration
items[0]->contentDetails->duration

dans store de Course  public function store(Request $request, YoutubeServices $ytb) //pour ajouter une formation
        {
            //champ user_id
            //pb:de masse assignment on user_id title et description
            // dans $course on recupere le champ course_id
            //creation des episodes liés à une formation
            $request->validate([
                'title' => 'required',
                'description' => 'required',
                'episodes' => ['required','array'],
                'episodes.*.title' => 'required',
                'episodes.*.description' => 'required',
                'episodes.*.video_url' => 'required',

            ]);
            $course =Course::create($request->all());

            foreach ($request->input('episodes') as $episode) {
                $episode['course_id'] = $course->id;
                Episode::create($episode);
            }
            return to_route('dashboard')->with('message', 'Formation ajoutée avec succès');
        }

        dans AppServiceProvider:
        on fait un $this->app pour recuperer l'application en cours
        singleton pour 1 seule instance de youtube
        je renvoie une closure on lui passe la cle 

         public function boot(): void
    {
        $this->app->singleton('App\Youtube\YoutubeServices', function () {
            return new YoutubeServices(env('YOUTUBE_API_KEY'));
        });
    }

